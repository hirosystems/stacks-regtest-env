# syntax=docker/dockerfile:1

FROM rust:bookworm as builder

# A commit hash, tag, or branch
ARG GIT_COMMIT=e14022aa7e2eb82714c2ccaa3b8f2ed0f5568f8e
ARG BLOCKCHAIN_REPO=https://github.com/stacks-network/stacks-blockchain.git

ARG TARGETPLATFORM
ENV DEBIAN_FRONTEND noninteractive

WORKDIR /stacks

COPY *stacks-blockchain-binaries /stacks-blockchain-binaries

SHELL ["/bin/bash", "-ce"]
RUN <<EOF
  STACKS_NODE_BIN_ARM64=/stacks-blockchain-binaries/aarch64-unknown-linux-gnu/stacks-node
  STACKS_NODE_BIN_AMD64=/stacks-blockchain-binaries/x86_64-unknown-linux-gnu/stacks-node
  if [ "$TARGETPLATFORM" = "linux/arm64" ] && [ -f "$STACKS_NODE_BIN_ARM64" ]; then
    echo "Using existing stacks-node binary: $STACKS_NODE_BIN_ARM64"
    mkdir -p target/release-lite && mv "$STACKS_NODE_BIN_ARM64" target/release-lite/stacks-node
    exit 0
  elif [ "$TARGETPLATFORM" = "linux/amd64" ] && [ -f "$STACKS_NODE_BIN_AMD64" ]; then
    echo "Using existing stacks-node binary: $STACKS_NODE_BIN_AMD64"
    mkdir -p target/release-lite && mv "$STACKS_NODE_BIN_AMD64" target/release-lite/stacks-node
    exit 0
  fi

  if git ls-remote -htq --exit-code $BLOCKCHAIN_REPO $GIT_COMMIT; then
    echo "Cloning Stacks blockchain from branch or tag: $GIT_COMMIT"
    git clone --depth 1 --branch "$GIT_COMMIT" "$BLOCKCHAIN_REPO" .
  else
    echo "Cloning Stacks blockchain from commit: $GIT_COMMIT"
    git init
    git remote add origin $BLOCKCHAIN_REPO
    git -c protocol.version=2 fetch --depth=1 origin $GIT_COMMIT
    git reset --hard FETCH_HEAD
  fi

  apt-get update && apt-get install -y libclang-dev
  rustup toolchain install stable
  rustup component add rustfmt --toolchain stable
  CARGO_NET_GIT_FETCH_WITH_CLI=true cargo build --package stacks-node --bin stacks-node --profile release-lite
EOF

FROM debian:bookworm-backports

COPY --from=builder /stacks/target/release-lite/stacks-node /usr/local/bin/
COPY --from=dobtc/bitcoin:25.1 /opt/bitcoin-*/bin /usr/local/bin

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y curl gettext-base jq
RUN curl -SLO https://deb.nodesource.com/nsolid_setup_deb.sh && chmod 500 nsolid_setup_deb.sh && ./nsolid_setup_deb.sh 20 && apt-get install nodejs -y
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

VOLUME /chainstate

# Stacks-node RPC
EXPOSE 20443
# Bitcoind JSON-RPC
EXPOSE 18443
# Postgres
EXPOSE 5490

ENV DATA_DIR=/chainstate/stacks-blockchain-data
ENV BTC_ADDR=miEJtNKa3ASpA19v5ZhvbKTEieYjLpzCYT
ENV BTC_ADDR_WIF=cStMQXkK5yTFGP3KbNXYQ3sJf2qwQiKrZwR9QJnksp32eKzef1za
ENV MINER_SEED=9e446f6b0c6a96cf2190e54bcd5a8569c3e386f091605499464389b8d4e0bfc201
ENV BITCOIN_PEER_HOST=127.0.0.1
ENV BITCOIN_PEER_PORT=18444
ENV BITCOIN_RPC_PORT=18443
ENV BITCOIN_RPC_USER=btc
ENV BITCOIN_RPC_PASS=btc

ARG MINE_INTERVAL=5s
ENV MINE_INTERVAL=$MINE_INTERVAL

ARG POX_REWARD_LENGTH=10
ENV POX_REWARD_LENGTH=$POX_REWARD_LENGTH

ARG POX_PREPARE_LENGTH=5
ENV POX_PREPARE_LENGTH=$POX_PREPARE_LENGTH

ARG STACKS_20_HEIGHT=0
ENV STACKS_20_HEIGHT=$STACKS_20_HEIGHT

ARG STACKS_2_05_HEIGHT=104
ENV STACKS_2_05_HEIGHT=$STACKS_2_05_HEIGHT

ARG STACKS_21_HEIGHT=106
ENV STACKS_21_HEIGHT=$STACKS_21_HEIGHT

ARG STACKS_POX2_HEIGHT=107
ENV STACKS_POX2_HEIGHT=$STACKS_POX2_HEIGHT

ARG STACKS_22_HEIGHT=108
ENV STACKS_22_HEIGHT=$STACKS_22_HEIGHT

ARG STACKS_23_HEIGHT=109
ENV STACKS_23_HEIGHT=$STACKS_23_HEIGHT

ARG STACKS_24_HEIGHT=111
ENV STACKS_24_HEIGHT=$STACKS_24_HEIGHT

ARG STACKS_25_HEIGHT=112
ENV STACKS_25_HEIGHT=$STACKS_25_HEIGHT

# do not boot into epoch3.0 for now (it doesn't work yet)
ARG STACKS_30_HEIGHT=9999995
ENV STACKS_30_HEIGHT=$STACKS_30_HEIGHT

# priv: 6ad9cadb42d4edbfbe0c5bfb3b8a4125ddced021c4174f829b714ccbf527f02001
# ARG REWARD_RECIPIENT=STQM73RQC4EX0A07KWG1J5ECZJYBZS4SJ4ERC6WN
ARG REWARD_RECIPIENT
ENV REWARD_RECIPIENT=$REWARD_RECIPIENT

ENV BOOTSTRAP_EVENTS_FILE=/event-log.ndjson

COPY ./bitcoin.conf /root/.bitcoin/bitcoin.conf
COPY ./stacks-krypton-miner.toml /root/config.toml.in

WORKDIR /root

# Setup event observer script
RUN <<EOF
cat > /root/event-observer.js <<'EOM'
const http = require('http');
const fs = require('fs');
const fd = fs.openSync(process.env.BOOTSTRAP_EVENTS_FILE, 'a');
const server = http.createServer((req, res) => {
  fs.appendFileSync(fd, req.url + '\n');
  req
    .on('data', chunk => fs.appendFileSync(fd, chunk))
    .on('end', () => {
      fs.appendFileSync(fd, '\n');
      res.writeHead(200).end();
    });
}).listen(3998, '0.0.0.0');
EOM
EOF

# Bootstrap chainstates
SHELL ["/bin/bash", "-ce"]
RUN <<EOF
  if [[ ! -z "${REWARD_RECIPIENT}" ]]; then
    export REWARD_RECIPIENT_CONF="block_reward_recipient = \"$REWARD_RECIPIENT\""
  fi

  mkdir -p /chainstate/bitcoin-data
  bitcoind &
  BTCD_PID=$!
  bitcoin-cli -rpcwait getmininginfo
  bitcoin-cli -named createwallet wallet_name=main descriptors=false load_on_startup=true
  bitcoin-cli -rpcwallet=main importprivkey $BTC_ADDR_WIF "" false
  bitcoin-cli generatetoaddress 101 $BTC_ADDR

  node event-observer.js &
  EVENT_OBSERVER_PID=$!

  export STACKS_EVENT_OBSERVER="127.0.0.1:3998"
  mkdir -p /chainstate/stacks-blockchain-data
  envsubst < config.toml.in > config.toml
  stacks-node start --config config.toml &
  STACKS_PID=$!

  while true; do
    HEIGHT=$(curl -s 127.0.0.1:20443/v2/info | jq '.burn_block_height')
    if [ "$HEIGHT" = "101" ]; then
      echo "Stacks node caught up to Bitcoin block $HEIGHT"
      break
    fi
    sleep 0.5s
  done

  while true; do
    TX=$(bitcoin-cli -rpcwallet=main listtransactions '*' 1 0 true)
    CONFS=$(echo "$TX" | jq '.[].confirmations')
    if [ "$CONFS" = "0" ]; then
      echo "Detected Stacks mining mempool tx, mining btc block..."
      bitcoin-cli generatetoaddress 1 $BTC_ADDR
      chain_height=$(bitcoin-cli getblockcount)
      echo "Current Bitcoin chain height: $chain_height"
    
      while true; do
        HEIGHT=$(curl -s 127.0.0.1:20443/v2/info | jq '.burn_block_height')
        if [ "$HEIGHT" = "$chain_height" ]; then
          echo "Stacks node caught up to Bitcoin block $HEIGHT"
          break
        else
          echo "Stacks node burn height: $HEIGHT, waiting for $chain_height"
        fi
        sleep 0.1s
      done

      if [ "$chain_height" = "$STACKS_25_HEIGHT" ]; then
        break
      fi

    else
      sleep 0.1s
    fi
  done


  kill $STACKS_PID
  wait $STACKS_PID

  bitcoin-cli stop
  wait $BTCD_PID

  kill $EVENT_OBSERVER_PID
EOF

# Create run script
RUN <<EOF
cat > run.sh <<'EOM'
#!/bin/bash -e

  if [ -f "$BOOTSTRAP_EVENTS_FILE" ]; then
    if [ -n "${STACKS_EVENT_OBSERVER}" ]; then
      while read -r event_path; do
        read -r event_payload
        post_url="http://${STACKS_EVENT_OBSERVER}${event_path}"
        echo "$event_payload" | curl -s --retry 150 --retry-delay 1 --retry-all-errors --show-error --fail -H 'Content-Type: application/json' -d @- "$post_url"
      done < "$BOOTSTRAP_EVENTS_FILE"
    fi
    rm "$BOOTSTRAP_EVENTS_FILE"
  fi

  if [[ ! -z "${REWARD_RECIPIENT}" ]]; then
    export REWARD_RECIPIENT_CONF="block_reward_recipient = \"$REWARD_RECIPIENT\""
  fi

  bitcoind &
  BTCD_PID=$!

  bitcoin-cli -rpcwait getmininginfo
  bitcoin-cli -rpcwait generatetoaddress 1 $BTC_ADDR

  envsubst < config.toml.in > config.toml
  stacks-node start --config config.toml &
  STACKS_PID=$!

  function start_miner() {
    while true; do
      TX=$(bitcoin-cli -rpcwallet=main listtransactions '*' 1 0 true)
      CONFS=$(echo "$TX" | jq '.[].confirmations')
      if [ "$CONFS" = "0" ]; then
        echo "Detected Stacks mining mempool tx, mining btc block..."
        bitcoin-cli generatetoaddress 1 $BTC_ADDR
      fi
      sleep $MINE_INTERVAL
    done
  }
  start_miner &

  function cleanup() {
    echo "Exiting, signal: $1"
    kill $STACKS_PID 2>/dev/null && echo "Stacks exiting.."
    wait $STACKS_PID 2>/dev/null && echo "Stacks exited"
    kill $BTCD_PID 2>/dev/null && echo "Bitcoind exiting.."
    wait $BTCD_PID 2>/dev/null && echo "Bitcoind exited"
  }
  trap "cleanup SIGTERM" SIGTERM
  trap "cleanup SIGINT" SIGINT
  trap "cleanup SIGHUP" SIGHUP
  trap "cleanup EXIT" EXIT

  wait
EOM
chmod +x run.sh
EOF

CMD ["/root/run.sh"]
