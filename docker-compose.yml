version: "3.9"

x-common-vars:
  - &STACKS_BLOCKCHAIN_COMMIT 447bb1519865be75a402f51cbb2d97f0db97186c # develop sep 25 2024
  - &STACKS_API_COMMIT ad4e1cae9afbc841fd89bbb0ba93f4b373ad5b6a # 8.0.1
  # - &PROXY_IP 172.18.0.100
  - &BTC_ADDR miEJtNKa3ASpA19v5ZhvbKTEieYjLpzCYT,mtyP5HvJHKgdFgGPA6repNs5CULDWnRvdm
  - &MINER_1_SEED 9e446f6b0c6a96cf2190e54bcd5a8569c3e386f091605499464389b8d4e0bfc201
  - &MINER_2_SEED c76111015de8f4319776c08ff7fc99cd4f021c8240bc82b0463f8e49c626f92801
  - &MINER_1_RECIPIENT ${MINER_1_RECIPIENT:-STQM73RQC4EX0A07KWG1J5ECZJYBZS4SJ4ERC6WN} # priv: 6ad9cadb42d4edbfbe0c5bfb3b8a4125ddced021c4174f829b714ccbf527f02001
  - &MINER_2_RECIPIENT ${MINER_2_RECIPIENT:-ST29SJ8NEJGB9BZZM2QM1VGC8DS5QYBPGHWN5N0V7}
  - &MINER_2_BOOTSTRAP 035379aa40c02890d253cfa577964116eb5295570ae9f7287cbae5f2585f5b2c7c@stacks-node:20444
  - &STACKING_KEYS ${STACKING_KEYS:-530d9f61984c888536871c6573073bdfc0058896dc1adfe9a6a10dfacadc209101,7287ba251d44a4d3fd9276c88ce34c5c52a038955511cccaf77e61068649c17801,7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01} # first 3 signers only
  - &BITCOIN_RPC_USER btc
  - &BITCOIN_RPC_PASS btc
  - &BITCOIN_RPC_PORT 18443
  - &BITCOIN_PEER_PORT 18444
  - &MINE_INTERVAL ${MINE_INTERVAL:-1s}
  - &MINE_INTERVAL_EPOCH25 ${MINE_INTERVAL_EPOCH25:-3s} # 10 second bitcoin block times in epoch 2.5
  - &MINE_INTERVAL_EPOCH3 ${MINE_INTERVAL_EPOCH3:-5s} # 10 minute bitcoin block times in epoch 3
  - &NAKAMOTO_BLOCK_INTERVAL 2 # seconds to wait between issuing stx-transfer transactions (which triggers Nakamoto block production)
  - &STACKS_20_HEIGHT ${STACKS_20_HEIGHT:-0}
  - &STACKS_2_05_HEIGHT ${STACKS_2_05_HEIGHT:-102}
  - &STACKS_21_HEIGHT ${STACKS_21_HEIGHT:-103}
  - &STACKS_POX2_HEIGHT ${STACKS_POX2_HEIGHT:-104} # 104 is is stacks_block=1, 106 is stacks_block=3
  - &STACKS_22_HEIGHT ${STACKS_22_HEIGHT:-105}
  - &STACKS_23_HEIGHT ${STACKS_23_HEIGHT:-106}
  - &STACKS_24_HEIGHT ${STACKS_24_HEIGHT:-107}
  - &STACKS_25_HEIGHT ${STACKS_25_HEIGHT:-108}
  - &STACKS_30_HEIGHT ${STACKS_30_HEIGHT:-131}
  - &STACKING_CYCLES ${STACKING_CYCLES:-1} # number of cycles to stack-stx or stack-extend for
  - &POX_PREPARE_LENGTH ${POX_PREPARE_LENGTH:-5}
  - &POX_REWARD_LENGTH ${POX_REWARD_LENGTH:-20}
  - &EXIT_FROM_MONITOR 1 # set to "1" to automatically shut down via monitor.ts

services:
  bitcoind:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.btc
    ports:
      - "18443:18443"
      - "18444:18444"
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data-1:/init-data
      - chainstate-1:/chainstate
    environment:
      DATA_DIR: /chainstate/bitcoin-data
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        mkdir -p $${DATA_DIR}
        rm -rf $${DATA_DIR}/*
        bitcoind

  bitcoind-miner:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.btc
    depends_on:
      - bitcoind
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
    environment:
      BTC_ADDR: *BTC_ADDR
      MINE_INTERVAL: *MINE_INTERVAL
      MINE_INTERVAL_EPOCH3: *MINE_INTERVAL_EPOCH3
      MINE_INTERVAL_EPOCH25: *MINE_INTERVAL_EPOCH25
      INIT_BLOCKS: 101
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        trap "exit" INT TERM
        trap "kill 0" EXIT
        bitcoin-cli -rpcconnect=bitcoind -rpcwait getmininginfo
        bitcoin-cli -rpcconnect=bitcoind -named createwallet wallet_name=main descriptors=false
        IFS=',' read -ra BTC_ADDRS <<< "$${BTC_ADDR}"
        for addr in "$${BTC_ADDRS[@]}"; do
          echo "Importing BTC address: $${addr}"
          bitcoin-cli -rpcconnect=bitcoind importaddress "$${addr}" "" false
        done
        for addr in "$${BTC_ADDRS[@]}"; do
          bitcoin-cli -rpcconnect=bitcoind generatetoaddress 1 "$${addr}"
        done
        REMAINING_BLOCKS=$$(($${INIT_BLOCKS} - $${#BTC_ADDRS[@]}))
        if [ $${REMAINING_BLOCKS} -gt 0 ]; then
          bitcoin-cli -rpcconnect=bitcoind generatetoaddress $${REMAINING_BLOCKS} "$${BTC_ADDRS[0]}"
        fi
        bitcoin-cli -rpcconnect=bitcoind rescanblockchain
        DEFAULT_TIMEOUT=$$(($$(date +%s) + 30))
        CURRENT_ADDR_INDEX=0
        while true; do
          TX=$$(bitcoin-cli -rpcconnect=bitcoind listtransactions '*' 1 0 true)
          CONFS=$$(echo "$${TX}" | jq '.[].confirmations')
          if [ "$${CONFS}" = "0" ] || [ $$(date +%s) -gt $$DEFAULT_TIMEOUT ]; then
            if [ $$(date +%s) -gt $$DEFAULT_TIMEOUT ]; then
              echo "Timed out waiting for a mempool tx, mining a btc block..."
            else
              echo "Detected Stacks mining mempool tx, mining btc block..."
            fi
            bitcoin-cli -rpcconnect=bitcoind generatetoaddress 1 "$${BTC_ADDRS[0]}"
            # bitcoin-cli -rpcconnect=bitcoind generatetoaddress 1 "$${BTC_ADDRS[$${CURRENT_ADDR_INDEX}]}"
            # echo "Mined a block to address: $${BTC_ADDRS[$${CURRENT_ADDR_INDEX}]}"
            # CURRENT_ADDR_INDEX=$$(( ($${CURRENT_ADDR_INDEX} + 1) % $${#BTC_ADDRS[@]} ))
            DEFAULT_TIMEOUT=$$(($$(date +%s) + 30))
          else
            echo "No Stacks mining tx detected"
          fi

          SLEEP_DURATION=$${MINE_INTERVAL}
          BLOCK_HEIGHT=$$(bitcoin-cli -rpcconnect=bitcoind getblockcount)
          if [ "$${BLOCK_HEIGHT}" -ge "$${STACKS_30_HEIGHT}" ]; then
            echo "In Epoch3, sleeping for $${MINE_INTERVAL_EPOCH3} ..."
            SLEEP_DURATION=$${MINE_INTERVAL_EPOCH3}
          elif [ "$${BLOCK_HEIGHT}" -ge "$${STACKS_25_HEIGHT}" ]; then
            echo "In Epoch2.5, sleeping for $${MINE_INTERVAL_EPOCH25} ..."
            SLEEP_DURATION=$${MINE_INTERVAL_EPOCH25}
          fi
          sleep $${SLEEP_DURATION} &
          wait || exit 0
        done

  stacks-node:
    networks:
      stacks:
        ipv4_address: 172.18.0.101
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - bitcoind
      # - toxiproxy
    ports:
      - "20443:20443"
      - "20444:20444"
    volumes:
      - ./stacks-krypton-miner.toml/:/root/config.toml.in
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data-1:/init-data
      - chainstate-1:/chainstate
    environment:
      # STACKS_LOG_TRACE: 1 # uncomment for trace logging
      # STACKS_LOG_DEBUG: 1
      # RUST_LOG: debug
      DATA_DIR: /chainstate/stacks-blockchain-miner-data
      BITCOIN_PEER_HOST: bitcoind
      BITCOIN_PEER_PORT: *BITCOIN_PEER_PORT
      BITCOIN_RPC_PORT: *BITCOIN_RPC_PORT
      BITCOIN_RPC_USER: *BITCOIN_RPC_USER
      BITCOIN_RPC_PASS: *BITCOIN_RPC_PASS
      RPC_BIND_PORT: 20443
      P2P_BIND_PORT: 20444
      MINER_IP: 172.18.0.101
      MINER_SEED: *MINER_1_SEED
      # MINER_BOOTSTRAP: *MINER_1_BOOTSTRAP # no bootstrap for first miner
      STACKS_20_HEIGHT: *STACKS_20_HEIGHT
      STACKS_2_05_HEIGHT: *STACKS_2_05_HEIGHT
      STACKS_21_HEIGHT: *STACKS_21_HEIGHT
      STACKS_POX2_HEIGHT: *STACKS_POX2_HEIGHT
      STACKS_22_HEIGHT: *STACKS_22_HEIGHT
      STACKS_23_HEIGHT: *STACKS_23_HEIGHT
      STACKS_24_HEIGHT: *STACKS_24_HEIGHT
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      REWARD_RECIPIENT: *MINER_1_RECIPIENT
      EVENT_OBSERVERS: stacks-signer-1:30001,stacks-signer-2:30002,stacks-signer-3:30003,stacks-signer-4:30004,stacks-signer-5:30005
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        if [[ ! -z "$${REWARD_RECIPIENT}" ]]; then
          export REWARD_RECIPIENT_CONF="block_reward_recipient = \"$${REWARD_RECIPIENT}\""
        fi
        if [[ ! -z "$${EVENT_OBSERVERS}" ]]; then
          IFS=',' read -ra OBSERVERS <<< "$${EVENT_OBSERVERS}"
          EVENTS_OBSERVERS_CONF=""
          for observer in "$${OBSERVERS[@]}"; do
            EVENTS_OBSERVERS_CONF+="[[events_observer]]"$'\n'"endpoint = \"$${observer}\""$'\n'"retry_count = 255"$'\n'"include_data_events = false"$'\n'"events_keys = [\"stackerdb\", \"block_proposal\", \"burn_blocks\"]"$'\n'
          done
          export EVENTS_OBSERVERS_CONF
        fi
        mkdir -p $${DATA_DIR}
        rm -rf $${DATA_DIR}/*
        envsubst < config.toml.in > config.toml
        bitcoin-cli -rpcwait -rpcconnect=bitcoind getmininginfo
        exec stacks-node start --config config.toml

  stacks-miner-2:
    networks:
      stacks:
        ipv4_address: 172.18.0.102
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - bitcoind
      # - toxiproxy
      - stacks-node
    ports:
      - "40443:40443"
      - "40444:40444"
    volumes:
      - ./stacks-krypton-miner-follower.toml/:/root/config.toml.in
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data-2:/init-data
      - chainstate-2:/chainstate
    environment:
      # STACKS_LOG_TRACE: 1 # uncomment for trace logging
      # STACKS_LOG_DEBUG: 1
      # RUST_LOG: debug
      DATA_DIR: /chainstate/stacks-blockchain-miner-data
      BITCOIN_PEER_HOST: bitcoind
      BITCOIN_PEER_PORT: *BITCOIN_PEER_PORT
      BITCOIN_RPC_PORT: *BITCOIN_RPC_PORT
      BITCOIN_RPC_USER: *BITCOIN_RPC_USER
      BITCOIN_RPC_PASS: *BITCOIN_RPC_PASS
      RPC_BIND_PORT: 40443
      P2P_BIND_PORT: 40444
      MINER_IP: 172.18.0.102
      MINER_SEED: *MINER_2_SEED
      MINER_BOOTSTRAP: *MINER_2_BOOTSTRAP
      STACKS_20_HEIGHT: *STACKS_20_HEIGHT
      STACKS_2_05_HEIGHT: *STACKS_2_05_HEIGHT
      STACKS_21_HEIGHT: *STACKS_21_HEIGHT
      STACKS_POX2_HEIGHT: *STACKS_POX2_HEIGHT
      STACKS_22_HEIGHT: *STACKS_22_HEIGHT
      STACKS_23_HEIGHT: *STACKS_23_HEIGHT
      STACKS_24_HEIGHT: *STACKS_24_HEIGHT
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      REWARD_RECIPIENT: *MINER_2_RECIPIENT
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        if [[ ! -z "$${REWARD_RECIPIENT}" ]]; then
          export REWARD_RECIPIENT_CONF="block_reward_recipient = \"$${REWARD_RECIPIENT}\""
        fi
        mkdir -p $${DATA_DIR}
        rm -rf $${DATA_DIR}/*
        envsubst < config.toml.in > config.toml
        bitcoin-cli -rpcwait -rpcconnect=bitcoind getmininginfo
        sleep 20
        exec stacks-node start --config config.toml

  stacker:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks-node
      STACKS_CORE_RPC_PORT: 20443
      STACKING_CYCLES: *STACKING_CYCLES
      STACKING_KEYS: *STACKING_KEYS
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      STACKING_INTERVAL: 1 # interval (seconds) for checking if stacking transactions are needed
      POST_TX_WAIT: 10 # seconds to wait after a stacking transaction broadcast before continuing the loop
      SERVICE_NAME: stacker
    depends_on:
      - stacks-node
    restart: always

  monitor:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks-api
      STACKS_CORE_RPC_PORT: 3999 # API, not node
      STACKING_CYCLES: *STACKING_CYCLES
      STACKING_KEYS: *STACKING_KEYS
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      EXIT_FROM_MONITOR: *EXIT_FROM_MONITOR
      SERVICE_NAME: monitor
    depends_on:
      - stacks-node
      - stacks-api
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        exec npx tsx /root/monitor.ts

  tx-broadcaster:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks-node
      STACKS_CORE_RPC_PORT: 20443
      NAKAMOTO_BLOCK_INTERVAL: *NAKAMOTO_BLOCK_INTERVAL
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      ACCOUNT_KEYS: 0d2f965b472a82efd5a96e6513c8b9f7edc725d5c96c7d35d6c722cedeb80d1b01,975b251dd7809469ef0c26ec3917971b75c51cd73a022024df4bf3b232cc2dc001,c71700b07d520a8c9731e4d0f095aa6efb91e16e25fb27ce2b72e7b698f8127a01
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      STACKING_KEYS: *STACKING_KEYS
    depends_on:
      - stacks-node
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        exec npx tsx /root/tx-broadcaster.ts
    restart: always

  postgres:
    networks:
      - stacks
    image: "postgres@sha256:ea40a028dd42740d6cff34135ff6b3119ff7ce0ed60120d992216456b5987fe7"
    ports:
      - "5490:5490"
    volumes:
      - chainstate-1:/chainstate
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stacks_blockchain_api
      PGPORT: 5490
      PGDATA: /chainstate/pg-data

  stacks-api:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-api
      args:
        GIT_COMMIT: *STACKS_API_COMMIT
    depends_on:
      - postgres
      # - toxiproxy
    ports:
      - "3999:3999"
    expose:
      - "3700"
    environment:
      NODE_ENVIRONMENT: production
      STACKS_API_LOG_LEVEL: debug
      STACKS_CHAIN_ID: "0x80000000"
      STACKS_BLOCKCHAIN_API_HOST: "0.0.0.0"
      STACKS_BLOCKCHAIN_API_PORT: 3999
      STACKS_CORE_EVENT_HOST: "0.0.0.0"
      STACKS_CORE_EVENT_PORT: 3700
      STACKS_CORE_RPC_HOST: stacks-node
      STACKS_CORE_RPC_PORT: 20443
      BTC_RPC_HOST: http://bitcoind
      BTC_RPC_PORT: 18443
      BTC_RPC_USER: btc
      BTC_RPC_PW: btc
      BTC_FAUCET_PK: *MINER_1_SEED
      PG_HOST: postgres
      PG_PORT: 5490
      PG_USER: postgres
      PG_PASSWORD: postgres
      PG_DATABASE: stacks_blockchain_api
      PG_SCHEMA: public

  stacks-signer-1:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks-node
    volumes:
      - ./signer.toml:/root/config.toml.in
      - chainstate-1:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-1.sqlite
      STACKS_NODE_HOST: stacks-node:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30001
      SIGNER_PRIVATE_KEY: 530d9f61984c888536871c6573073bdfc0058896dc1adfe9a6a10dfacadc209101
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-2:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks-node
    volumes:
      - ./signer.toml:/root/config.toml.in
      - chainstate-1:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-2.sqlite
      STACKS_NODE_HOST: stacks-node:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30002
      SIGNER_PRIVATE_KEY: 7287ba251d44a4d3fd9276c88ce34c5c52a038955511cccaf77e61068649c17801
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-3:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks-node
    volumes:
      - ./signer.toml:/root/config.toml.in
      - chainstate-1:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-3.sqlite
      STACKS_NODE_HOST: stacks-node:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30003
      SIGNER_PRIVATE_KEY: 7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-4:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks-node
    volumes:
      - ./signer.toml:/root/config.toml.in
      - chainstate-1:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-4.sqlite
      STACKS_NODE_HOST: stacks-node:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30004
      SIGNER_PRIVATE_KEY: bff7cbe82409a993a11ea74ba95c4aaf44fbbb8fbe9aaa507a73ef16e74372df01
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-5:
    networks:
      - stacks
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks-node
    volumes:
      - ./signer.toml:/root/config.toml.in
      - chainstate-1:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-5.sqlite
      STACKS_NODE_HOST: stacks-node:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30005
      SIGNER_PRIVATE_KEY: f43fcfe1c5c9c5e2f8a4ee1d10225d000c3055e9510e39cc2d9b03571cd0f53f01
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  # toxiproxy:
  #   image: ghcr.io/shopify/toxiproxy:2.9.0
  #   networks:
  #     stacks:
  #       ipv4_address: *PROXY_IP
  #   ports:
  #     - "8474:8474" # Toxiproxy API
  #     - "20443:20443" # stacks-node
  #     - "20444:20444" # stacks-node
  #     - "40443:40443" # stacks-miner-2
  #     - "40444:40444" # stacks-miner-2
  #     - "3999:3999" # stacks-api
  #     - "30001:30001" # stacks-signer-1
  #     - "30002:30002" # stacks-signer-2
  #     - "30003:30003" # stacks-signer-3
  #   volumes:
  #     - ./config:/config
  #   command: -host 0.0.0.0 -config /config/toxiproxy.json

networks:
  stacks:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16 # Custom subnet

volumes:
  chainstate-1:
  chainstate-2:
# new idea: turn monitor into a better cli tool, that flushes screen rather than append

# miner-1
# 9e446f6b0c6a96cf2190e54bcd5a8569c3e386f091605499464389b8d4e0bfc201
# PUB: 035379aa40c02890d253cfa577964116eb5295570ae9f7287cbae5f2585f5b2c7c
# STX: STEW4ZNT093ZHK4NEQKX8QJGM2Y7WWJ2FQQS5C19
# BTC: miEJtNKa3ASpA19v5ZhvbKTEieYjLpzCYT
# wif: cStMQXkK5yTFGP3KbNXYQ3sJf2qwQiKrZwR9QJnksp32eKzef1za

# miner-2
# c76111015de8f4319776c08ff7fc99cd4f021c8240bc82b0463f8e49c626f92801
# PUB: 03f4262c509e22e37428abc1cd46d09f9e8b1a125e856b84d5d36cd51deffca22e
# STX: ST29SJ8NEJGB9BZZM2QM1VGC8DS5QYBPGHWN5N0V7
# BTC: mtyP5HvJHKgdFgGPA6repNs5CULDWnRvdm
